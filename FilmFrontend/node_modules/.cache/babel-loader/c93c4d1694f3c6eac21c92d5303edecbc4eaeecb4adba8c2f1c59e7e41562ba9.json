{"ast":null,"code":"// ParseFormats.js\n\n// Resusable function for parsing XML\nexport const parseXmlData = text => {\n  const parser = new DOMParser();\n  const xmlDoc = parser.parseFromString(text, \"text/xml\");\n  const films = xmlDoc.getElementsByTagName(\"Film\");\n  const data = Array.from(films).map(film => {\n    return {\n      id: parseInt(film.getElementsByTagName(\"id\")[0].textContent),\n      title: film.getElementsByTagName(\"title\")[0].textContent,\n      year: parseInt(film.getElementsByTagName(\"year\")[0].textContent),\n      director: film.getElementsByTagName(\"director\")[0].textContent,\n      stars: film.getElementsByTagName(\"stars\")[0].textContent,\n      review: film.getElementsByTagName(\"review\")[0].textContent\n    };\n  });\n  return data;\n};\n\n// Resusable function for parsing text\nexport const parseTextData = text => {\n  const films = text.trim().split(\"|\").filter(Boolean);\n  const data = films.map(film => {\n    const [id, title, year, director, stars, review] = film.split(\"#\");\n    return {\n      id: parseInt(id),\n      title,\n      year: parseInt(year),\n      director,\n      stars,\n      review\n    };\n  });\n  return data;\n};","map":{"version":3,"names":["parseXmlData","text","parser","DOMParser","xmlDoc","parseFromString","films","getElementsByTagName","data","Array","from","map","film","id","parseInt","textContent","title","year","director","stars","review","parseTextData","trim","split","filter","Boolean"],"sources":["/Users/spatel46/Documents/Enterprise Programming/Assignment/sabihapatel20060719/FilmFrontend/src/util/Parser.js"],"sourcesContent":["// ParseFormats.js\n\n// Resusable function for parsing XML\nexport const parseXmlData = (text) => {\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(text, \"text/xml\");\n  \n    const films = xmlDoc.getElementsByTagName(\"Film\");\n    const data = Array.from(films).map((film) => {\n      return {\n        id: parseInt(film.getElementsByTagName(\"id\")[0].textContent),\n        title: film.getElementsByTagName(\"title\")[0].textContent,\n        year: parseInt(film.getElementsByTagName(\"year\")[0].textContent),\n        director: film.getElementsByTagName(\"director\")[0].textContent,\n        stars: film.getElementsByTagName(\"stars\")[0].textContent,\n        review: film.getElementsByTagName(\"review\")[0].textContent,\n      };\n    });\n    return data;\n  };\n  \n  // Resusable function for parsing text\n  export const parseTextData = (text) => {\n    const films = text.trim().split(\"|\").filter(Boolean);\n    const data = films.map((film) => {\n      const [id, title, year, director, stars, review] = film.split(\"#\");\n      return {\n        id: parseInt(id),\n        title,\n        year: parseInt(year),\n        director,\n        stars,\n        review,\n      };\n    });\n    return data;\n  };\n  "],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,YAAY,GAAIC,IAAI,IAAK;EAClC,MAAMC,MAAM,GAAG,IAAIC,SAAS,EAAE;EAC9B,MAAMC,MAAM,GAAGF,MAAM,CAACG,eAAe,CAACJ,IAAI,EAAE,UAAU,CAAC;EAEvD,MAAMK,KAAK,GAAGF,MAAM,CAACG,oBAAoB,CAAC,MAAM,CAAC;EACjD,MAAMC,IAAI,GAAGC,KAAK,CAACC,IAAI,CAACJ,KAAK,CAAC,CAACK,GAAG,CAAEC,IAAI,IAAK;IAC3C,OAAO;MACLC,EAAE,EAAEC,QAAQ,CAACF,IAAI,CAACL,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAACQ,WAAW,CAAC;MAC5DC,KAAK,EAAEJ,IAAI,CAACL,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAACQ,WAAW;MACxDE,IAAI,EAAEH,QAAQ,CAACF,IAAI,CAACL,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAACQ,WAAW,CAAC;MAChEG,QAAQ,EAAEN,IAAI,CAACL,oBAAoB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAACQ,WAAW;MAC9DI,KAAK,EAAEP,IAAI,CAACL,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAACQ,WAAW;MACxDK,MAAM,EAAER,IAAI,CAACL,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAACQ;IACjD,CAAC;EACH,CAAC,CAAC;EACF,OAAOP,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMa,aAAa,GAAIpB,IAAI,IAAK;EACrC,MAAMK,KAAK,GAAGL,IAAI,CAACqB,IAAI,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC;EACpD,MAAMjB,IAAI,GAAGF,KAAK,CAACK,GAAG,CAAEC,IAAI,IAAK;IAC/B,MAAM,CAACC,EAAE,EAAEG,KAAK,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,MAAM,CAAC,GAAGR,IAAI,CAACW,KAAK,CAAC,GAAG,CAAC;IAClE,OAAO;MACLV,EAAE,EAAEC,QAAQ,CAACD,EAAE,CAAC;MAChBG,KAAK;MACLC,IAAI,EAAEH,QAAQ,CAACG,IAAI,CAAC;MACpBC,QAAQ;MACRC,KAAK;MACLC;IACF,CAAC;EACH,CAAC,CAAC;EACF,OAAOZ,IAAI;AACb,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}