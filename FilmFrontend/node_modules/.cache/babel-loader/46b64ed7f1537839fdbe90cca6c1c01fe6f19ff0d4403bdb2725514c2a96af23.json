{"ast":null,"code":"var _jsxFileName = \"/Users/spatel46/Documents/Enterprise Programming/Assignment/sabihapatel20060719/FilmFrontend/src/components/FilmAddEdit.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\nimport { Button, Container, Form, FormGroup, Input, Label } from \"reactstrap\";\nimport AppNavbar from \"./Navbar\";\nimport FormatContext from '../util/FormatContext';\nimport '../css/film-add-edit.css';\n\n/**\n *\n * This component provides a form for adding or editing a film's details, parsing the data depending on the format value selected.\n *\n * @returns {React.Component} The FilmAddEdit component which includes a form and associated handling logic.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FilmAddEdit = () => {\n  _s();\n  // add form\n  const initialFormState = {\n    id: \"\",\n    title: \"\",\n    year: \"\",\n    director: \"\",\n    stars: \"\",\n    review: \"\"\n  };\n  const [group, setGroup] = useState(initialFormState);\n  const navigate = useNavigate();\n  const {\n    id\n  } = useParams();\n  const {\n    format\n  } = useContext(FormatContext);\n\n  // setting values on the form for edit\n\n  // useEffect(() => {\n  //   if(id)\n  //   {\n  //     fetch(`/FilmAPI/filmapi?id=${id}`)\n  //       .then((response) => response.json())\n  //       .then((data) => {\n  //         console.log('Film ID:', id);\n  //         console.log(\"Setting Values...\\n\", data)\n\n  //         const film = data[0];\n\n  //         setGroup({\n  //           id: film.id,\n  //           title: film.title,\n  //           year: film.year,\n  //           director: film.director,\n  //           stars: film.stars,\n  //           review: film.review,\n  //         });\n  //       });\n  //   }\n  // }, [id, format]);\n\n  useEffect(() => {\n    if (id) {\n      // set accept\n      let accept = \"application/json\";\n      if (format === \"xml\") {\n        accept = \"application/xml\";\n      } else if (format === \"text\") {\n        accept = \"text/plain\";\n      }\n      fetch(`/FilmAPI/filmapi?id=${id}`, {\n        headers: {\n          Accept: accept\n        },\n        mode: \"cors\"\n      }).then(async response => {\n        if (format === \"text\") {\n          const text = await response.text();\n          const fields = text.split(\"#\").map(field => field.trim());\n          const [id, title, year, director, stars, review] = fields;\n          return {\n            id: parseInt(id),\n            title,\n            year: parseInt(year),\n            director,\n            stars,\n            review\n          };\n        } else if (format === \"xml\") {\n          const xmlData = await response.text();\n          const parser = new DOMParser();\n          const xmlDoc = parser.parseFromString(xmlData, \"application/xml\");\n          return {\n            id: parseInt(xmlDoc.getElementsByTagName(\"id\")[0].textContent),\n            title: xmlDoc.getElementsByTagName(\"title\")[0].textContent,\n            year: parseInt(xmlDoc.getElementsByTagName(\"year\")[0].textContent),\n            director: xmlDoc.getElementsByTagName(\"director\")[0].textContent,\n            stars: xmlDoc.getElementsByTagName(\"stars\")[0].textContent,\n            review: xmlDoc.getElementsByTagName(\"review\")[0].textContent\n          };\n        } else {\n          // JSON\n\n          const film = response[0];\n          setGroup({\n            id: film.id,\n            title: film.title,\n            year: film.year,\n            director: film.director,\n            stars: film.stars,\n            review: film.review\n          });\n          console.log('JSON response:', json);\n          return response.json();\n        }\n      }).then(film => {\n        console.log('Film ID:', id);\n        console.log(\"Setting Values...\\n\", film);\n        setGroup(film);\n      });\n    }\n  }, [id, format]);\n\n  // updates group state\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setGroup({\n      ...group,\n      [name]: value\n    });\n  };\n\n  /**\n   * Event handler for the form submission. Depending on the format selected, it parses the data accordingly in JSON, XML or Text\n   * It sends a PUT request to update the film data if 'id' is present, \n   * otherwise it sends a POST request to add new film data.\n   * \n   * It also performs validation so the correct data is submitted\n   * \n   * @async\n   * @param {Event} event - The event object\n   */\n  const handleSubmit = async event => {\n    let body = Request.body;\n    let accept = \"application/json\";\n    event.preventDefault();\n    if (!group.title || !group.year || !group.director || !group.stars || !group.review) {\n      alert('Please fill in all required fields.');\n      return;\n    }\n    if (format === \"xml\") {\n      accept = \"application/xml\";\n      const React = require('react');\n      const ReactDomServer = require(\"react-dom/server\");\n      const Film = group => React.createElement(\"Film\", group);\n      body = id ? ReactDomServer.renderToStaticMarkup(\n      /*#__PURE__*/\n      // edit\n      _jsxDEV(Film, {\n        children: [/*#__PURE__*/_jsxDEV(\"id\", {\n          children: group.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"title\", {\n          children: group.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"year\", {\n          children: group.year\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"director\", {\n          children: group.director\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"stars\", {\n          children: group.stars\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"review\", {\n          children: group.review\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)) : ReactDomServer.renderToStaticMarkup(\n      /*#__PURE__*/\n      // add\n      _jsxDEV(Film, {\n        children: [/*#__PURE__*/_jsxDEV(\"title\", {\n          children: group.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"year\", {\n          children: group.year\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"director\", {\n          children: group.director\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"stars\", {\n          children: group.stars\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"review\", {\n          children: group.review\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this));\n    } else if (format === \"text\") {\n      accept = \"text/plain\";\n      body = id ? `${id}#${group.title}#${group.year}#${group.director}#${group.stars}#${group.review}|` // edit\n      : `#${group.title}#${group.year}#${group.director}#${group.stars}#${group.review}|`; // add\n    } else {\n      body = JSON.stringify(id ? group // edit\n      : {\n        ...group,\n        id: undefined\n      }); // add\n    }\n\n    await fetch(\"/FilmAPI/filmapi\", {\n      method: id ? \"PUT\" : \"POST\",\n      headers: {\n        Accept: accept,\n        \"Content-Type\": accept\n      },\n      body: body\n    });\n    setGroup(initialFormState);\n    navigate(\"/\");\n  };\n  const ptitle = /*#__PURE__*/_jsxDEV(\"h2\", {\n    className: \"d-flex justify-content-center pt-4 display-6\",\n    children: id ? \"Edit Film\" : \"Add Film\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 18\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(AppNavbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [ptitle, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"targetForm\",\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleSubmit,\n          id: \"targetForm\",\n          className: \"was-validated\",\n          children: [id && /*#__PURE__*/_jsxDEV(FormGroup, {\n            className: \"FormGroup\",\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"id\",\n              children: \"ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"id\",\n              id: \"id\",\n              value: group.id || \"\",\n              onChange: handleChange,\n              autoComplete: \"id\",\n              readOnly: true,\n              style: {\n                backgroundColor: '#e6e6e6'\n              },\n              className: \"required\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            className: \"FormGroup\",\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"title\",\n              children: \"Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"title\",\n              id: \"title\",\n              value: group.title || \"\",\n              onChange: handleChange,\n              autoComplete: \"title\",\n              className: \"required\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            className: \"FormGroup\",\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"year\",\n              children: \"Year\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"year\",\n              id: \"year\",\n              value: group.year || \"\",\n              onChange: handleChange,\n              autoComplete: \"year\",\n              className: \"required\",\n              pattern: \"^[0-9]{4}$\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            className: \"FormGroup\",\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"director\",\n              children: \"Director\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"director\",\n              id: \"director\",\n              value: group.director || \"\",\n              onChange: handleChange,\n              autoComplete: \"director\",\n              className: \"required\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            className: \"FormGroup\",\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"stars\",\n              children: \"Stars\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"stars\",\n              id: \"stars\",\n              value: group.stars || \"\",\n              onChange: handleChange,\n              autoComplete: \"stars\",\n              className: \"required\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            className: \"FormGroup\",\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"review\",\n              children: \"Review\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"textarea\",\n              name: \"review\",\n              id: \"review\",\n              value: group.review || \"\",\n              onChange: handleChange,\n              autoComplete: \"review\",\n              rows: \"5\",\n              className: \"required\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            className: \"pt-2 ps-5 targetForm\",\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              color: \"danger\",\n              type: \"submit\",\n              className: \"px-3 me-3\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 295,\n              columnNumber: 15\n            }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n              color: \"danger\",\n              tag: Link,\n              to: \"/\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n};\n_s(FilmAddEdit, \"Os0NzD8RGAuWOT0SICW03XQIdVs=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = FilmAddEdit;\nexport default FilmAddEdit;\nvar _c;\n$RefreshReg$(_c, \"FilmAddEdit\");","map":{"version":3,"names":["React","useEffect","useState","useContext","Link","useNavigate","useParams","Button","Container","Form","FormGroup","Input","Label","AppNavbar","FormatContext","FilmAddEdit","initialFormState","id","title","year","director","stars","review","group","setGroup","navigate","format","accept","fetch","headers","Accept","mode","then","response","text","fields","split","map","field","trim","parseInt","xmlData","parser","DOMParser","xmlDoc","parseFromString","getElementsByTagName","textContent","film","console","log","json","handleChange","event","name","value","target","handleSubmit","body","Request","preventDefault","alert","require","ReactDomServer","Film","createElement","renderToStaticMarkup","JSON","stringify","undefined","method","ptitle","backgroundColor"],"sources":["/Users/spatel46/Documents/Enterprise Programming/Assignment/sabihapatel20060719/FilmFrontend/src/components/FilmAddEdit.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\nimport { Button, Container, Form, FormGroup, Input, Label } from \"reactstrap\";\nimport AppNavbar from \"./Navbar\";\nimport FormatContext from '../util/FormatContext';\nimport '../css/film-add-edit.css';\n\n/**\n *\n * This component provides a form for adding or editing a film's details, parsing the data depending on the format value selected.\n *\n * @returns {React.Component} The FilmAddEdit component which includes a form and associated handling logic.\n */\nconst FilmAddEdit = () => {\n\n  // add form\n  const initialFormState = {\n    id: \"\",\n    title: \"\",\n    year: \"\",\n    director: \"\",\n    stars: \"\",\n    review: \"\",\n  };\n\n  const [group, setGroup] = useState(initialFormState);\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const { format } = useContext(FormatContext);\n\n\n  // setting values on the form for edit\n\n  // useEffect(() => {\n  //   if(id)\n  //   {\n  //     fetch(`/FilmAPI/filmapi?id=${id}`)\n  //       .then((response) => response.json())\n  //       .then((data) => {\n  //         console.log('Film ID:', id);\n  //         console.log(\"Setting Values...\\n\", data)\n\n  //         const film = data[0];\n\n  //         setGroup({\n  //           id: film.id,\n  //           title: film.title,\n  //           year: film.year,\n  //           director: film.director,\n  //           stars: film.stars,\n  //           review: film.review,\n  //         });\n  //       });\n  //   }\n  // }, [id, format]);\n\n  useEffect(() => {\n    if(id) {\n      // set accept\n      let accept = \"application/json\";\n      if (format === \"xml\") {\n        accept = \"application/xml\";\n      } else if (format === \"text\") {\n        accept = \"text/plain\";\n      }\n    \n      fetch(`/FilmAPI/filmapi?id=${id}`, {\n        headers: {\n          Accept: accept,\n        },\n        mode: \"cors\",\n      })\n      .then(async (response) => {\n        if (format === \"text\") {\n          const text = await response.text();\n          const fields = text.split(\"#\").map(field => field.trim());\n          const [id, title, year, director, stars, review] = fields;\n          return {\n            id: parseInt(id),\n            title,\n            year: parseInt(year),\n            director,\n            stars,\n            review,\n          };\n        } else if (format === \"xml\") {\n          const xmlData = await response.text();\n          const parser = new DOMParser();\n          const xmlDoc = parser.parseFromString(xmlData, \"application/xml\");\n  \n          return {\n            id: parseInt(xmlDoc.getElementsByTagName(\"id\")[0].textContent),\n            title: xmlDoc.getElementsByTagName(\"title\")[0].textContent,\n            year: parseInt(xmlDoc.getElementsByTagName(\"year\")[0].textContent),\n            director: xmlDoc.getElementsByTagName(\"director\")[0].textContent,\n            stars: xmlDoc.getElementsByTagName(\"stars\")[0].textContent,\n            review: xmlDoc.getElementsByTagName(\"review\")[0].textContent,\n          };\n        } else { // JSON\n\n          const film = response[0];\n          setGroup({\n                      id: film.id,\n                      title: film.title,\n                      year: film.year,\n                      director: film.director,\n                      stars: film.stars,\n                      review: film.review,\n                    });\n          console.log('JSON response:', json);\n          return response.json();\n        }\n      })\n      .then((film) => {\n        console.log('Film ID:', id);\n        console.log(\"Setting Values...\\n\", film)\n        setGroup(film);\n      });\n    }\n  }, [id, format]);\n  \n\n  // updates group state\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setGroup({ ...group, [name]: value });\n\n  };\n\n\n  /**\n   * Event handler for the form submission. Depending on the format selected, it parses the data accordingly in JSON, XML or Text\n   * It sends a PUT request to update the film data if 'id' is present, \n   * otherwise it sends a POST request to add new film data.\n   * \n   * It also performs validation so the correct data is submitted\n   * \n   * @async\n   * @param {Event} event - The event object\n   */\n  const handleSubmit = async (event) => {\n    let body = Request.body;\n    let accept = \"application/json\";\n    event.preventDefault();\n\n    if (!group.title || !group.year || !group.director || !group.stars || !group.review) {\n      alert('Please fill in all required fields.');\n      return;\n    }\n\n    if (format === \"xml\") {\n      accept = \"application/xml\";\n      const React = require('react');\n      const ReactDomServer = require(\"react-dom/server\")\n      const Film = (group) => React.createElement(\"Film\", group);\n\n      body = id ? ReactDomServer.renderToStaticMarkup( // edit\n        <Film>\n          <id>{group.id}</id>\n          <title>{group.title}</title>\n          <year>{group.year}</year>\n          <director>{group.director}</director>\n          <stars>{group.stars}</stars>\n          <review>{group.review}</review>\n        </Film>)\n        : ReactDomServer.renderToStaticMarkup( // add\n          <Film>\n            <title>{group.title}</title>\n            <year>{group.year}</year>\n            <director>{group.director}</director>\n            <stars>{group.stars}</stars>\n            <review>{group.review}</review>\n          </Film>);\n    }\n\n    else if (format === \"text\") {\n      accept = \"text/plain\";\n      body = id ? `${id}#${group.title}#${group.year}#${group.director}#${group.stars}#${group.review}|` // edit\n        : `#${group.title}#${group.year}#${group.director}#${group.stars}#${group.review}|`; // add\n    }\n\n    else {\n      body = JSON.stringify(id ? group // edit\n        : { ...group, id: undefined }); // add\n    }\n\n    await fetch(\"/FilmAPI/filmapi\", {\n      method: id ? \"PUT\" : \"POST\",\n      headers: {\n        Accept: accept,\n        \"Content-Type\": accept,\n      },\n      body: body,\n    });\n\n    setGroup(initialFormState);\n    navigate(\"/\");\n  };\n\n  const ptitle = <h2 className=\"d-flex justify-content-center pt-4 display-6\">{id ? \"Edit Film\" : \"Add Film\"}</h2>;\n  return (\n    <div>\n      <AppNavbar />\n      <Container>\n        {ptitle}\n        <div className=\"targetForm\">\n          <Form onSubmit={handleSubmit} id=\"targetForm\" className=\"was-validated\">\n\n\n            {id && (\n              <FormGroup className=\"FormGroup\">\n                <Label for=\"id\">ID</Label>\n                <Input\n                  type=\"text\"\n                  name=\"id\"\n                  id=\"id\"\n                  value={group.id || \"\"}\n                  onChange={handleChange}\n                  autoComplete=\"id\"\n                  readOnly\n                  style={{ backgroundColor: '#e6e6e6' }}\n                  className=\"required\"\n                />\n              </FormGroup>\n            )}\n\n            <FormGroup className=\"FormGroup\">\n              <Label for=\"title\">Title</Label>\n              <Input\n                type=\"text\"\n                name=\"title\"\n                id=\"title\"\n                value={group.title || \"\"}\n                onChange={handleChange}\n                autoComplete=\"title\"\n                className=\"required\"\n              />\n            </FormGroup>\n\n            <FormGroup className=\"FormGroup\">\n              <Label for=\"year\">Year</Label>\n              <Input\n                type=\"text\"\n                name=\"year\"\n                id=\"year\"\n                value={group.year || \"\"}\n                onChange={handleChange}\n                autoComplete=\"year\"\n                className=\"required\"\n                pattern=\"^[0-9]{4}$\"\n              />\n            </FormGroup>\n\n            <FormGroup className=\"FormGroup\">\n              <Label for=\"director\">Director</Label>\n              <Input\n                type=\"text\"\n                name=\"director\"\n                id=\"director\"\n                value={group.director || \"\"}\n                onChange={handleChange}\n                autoComplete=\"director\"\n                className=\"required\"\n              />\n            </FormGroup>\n\n            <FormGroup className=\"FormGroup\">\n              <Label for=\"stars\">Stars</Label>\n              <Input\n                type=\"text\"\n                name=\"stars\"\n                id=\"stars\"\n                value={group.stars || \"\"}\n                onChange={handleChange}\n                autoComplete=\"stars\"\n                className=\"required\"\n              />\n            </FormGroup>\n\n            <FormGroup className=\"FormGroup\">\n              <Label for=\"review\">Review</Label>\n              <Input\n                type=\"textarea\"\n                name=\"review\"\n                id=\"review\"\n                value={group.review || \"\"}\n                onChange={handleChange}\n                autoComplete=\"review\"\n                rows=\"5\"\n                className=\"required\"\n              />\n            </FormGroup>\n\n            <FormGroup className=\"pt-2 ps-5 targetForm\">\n              <Button color=\"danger\" type=\"submit\" className=\"px-3 me-3\">\n                Save\n              </Button>{\" \"}\n              <Button color=\"danger\" tag={Link} to=\"/\">\n                Cancel\n              </Button>\n            </FormGroup>\n\n\n          </Form>\n        </div>\n      </Container>\n    </div>\n  );\n};\n\nexport default FilmAddEdit;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}