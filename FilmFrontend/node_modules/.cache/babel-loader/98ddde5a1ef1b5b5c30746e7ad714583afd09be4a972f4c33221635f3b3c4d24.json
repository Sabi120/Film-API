{"ast":null,"code":"var _jsxFileName = \"/Users/spatel46/Documents/Enterprise Programming/Assignment/sabihapatel20060719/FilmFrontend/src/util/Format.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n//import React, { useState, useContext} from 'react';\nimport React, { useContext } from 'react';\nimport '../css/App.css';\n//import { BrowserRouter as Router, Route, Routes, useLocation } from 'react-router-dom';\n\nimport { BrowserRouter as useLocation } from 'react-router-dom';\n\n// import Films from '../ui/Home';\n// import EditFilm from '../ui/FilmAddEdit';\n// import AddEdit from '../ui/FilmAddEdit';\nimport { FormGroup, Input } from 'reactstrap';\nimport { useNavigate } from \"react-router-dom\";\nimport FormatContext from './FormatContext.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconsole.log(\"FormatContext\", FormatContext.format);\n\n/**\n* The main App component of the application.\n*\n* Sets up the format context for the data format (defaults to 'json'). \n* It also sets up routing for the application\n*\n* @returns {React.Component} The App component which includes routing and the context provider for the application.\n*/\nconst App = () => {\n  _s();\n  const [format, setFormat] = useState('json');\n  return /*#__PURE__*/_jsxDEV(FormatContext.Provider, {\n    value: {\n      format,\n      setFormat\n    },\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Films, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 40\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/films/:id\",\n          element: /*#__PURE__*/_jsxDEV(EditFilm, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/films/add\",\n          element: /*#__PURE__*/_jsxDEV(AddEdit, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 43\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n/**\n * The Format component of the application.\n *\n * This component provides a dropdown that allows the user to choose the format of data - JSON, XML or Text.\n * It also handles fetching data/GET request in the selected format from the '/FilmAPI/filmapi' endpoint whenever\n * the selected format is changed and the current page is '/FilmAPI/filmapi'.\n *\n * @returns {React.Component} The Format component which includes a selection dropdown and data fetching logic.\n */\n_s(App, \"K/fvYEh72ap0R7QpPvBs8acKMRE=\");\n_c = App;\nconst Format = () => {\n  _s2();\n  const {\n    format,\n    setFormat\n  } = useContext(FormatContext);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // sets the format of the dropdown value and does the GET request if the endpoint is '/FilmAPI/filmapi'\n  const handleFormat = async event => {\n    console.log(\"Dropdown: \", event.target.value);\n    FormatContext.format = event.target.value;\n    setFormat(event.target.value);\n    if (location.pathname === '/FilmAPI/filmapi') {\n      await handleSubmit(event, event.target.value);\n    }\n  };\n\n  /**\n  * Performs a GET request in different formats based on the selected value of the dropdown.\n  * After the GET request is completed, it navigates to the root route.\n  * \n  * @async\n  * @function\n  * @param {Event} event - The submit event triggered by the form.\n  * @param {string} selectedFormat - The selected format for the GET request - JSON, XML or Text\n  * \n  * @returns {Promise} - to send GET request to the API\n  * \n  */\n  const handleSubmit = async (event, selectedFormat) => {\n    let accept = \"application/json\";\n    event.preventDefault();\n    if (selectedFormat === \"xml\") {\n      accept = \"application/xml\";\n    } else if (selectedFormat === \"text\") {\n      accept = \"text/plain\";\n    } else {\n      accept = \"application/json\";\n    }\n    await fetch(`/FilmAPI/filmapi`, {\n      method: \"GET\",\n      headers: {\n        Accept: accept,\n        \"Content-Type\": accept\n      }\n    });\n    navigate(\"/\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ms-4 me-3 row pt-4\",\n    children: /*#__PURE__*/_jsxDEV(FormGroup, {\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        type: \"select\",\n        name: \"formatType\",\n        value: format,\n        onChange: handleFormat,\n        className: \"mb-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"json\",\n          children: \"JSON\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"xml\",\n          children: \"XML\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"text\",\n          children: \"Text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s2(Format, \"Yik6jTqy7XeHvbilZLqrWpqJlXc=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c2 = Format;\nexport { App, Format };\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Format\");","map":{"version":3,"names":["React","useContext","BrowserRouter","useLocation","FormGroup","Input","useNavigate","FormatContext","console","log","format","App","setFormat","useState","Format","navigate","location","handleFormat","event","target","value","pathname","handleSubmit","selectedFormat","accept","preventDefault","fetch","method","headers","Accept"],"sources":["/Users/spatel46/Documents/Enterprise Programming/Assignment/sabihapatel20060719/FilmFrontend/src/util/Format.js"],"sourcesContent":["//import React, { useState, useContext} from 'react';\nimport React, {useContext} from 'react';\n\nimport '../css/App.css';\n//import { BrowserRouter as Router, Route, Routes, useLocation } from 'react-router-dom';\n\nimport { BrowserRouter as useLocation } from 'react-router-dom';\n\n// import Films from '../ui/Home';\n// import EditFilm from '../ui/FilmAddEdit';\n// import AddEdit from '../ui/FilmAddEdit';\nimport { FormGroup, Input } from 'reactstrap';\nimport { useNavigate } from \"react-router-dom\";\nimport FormatContext from './FormatContext.js';\n\nconsole.log(\"FormatContext\",FormatContext.format);\n\n\n\n/**\n* The main App component of the application.\n*\n* Sets up the format context for the data format (defaults to 'json'). \n* It also sets up routing for the application\n*\n* @returns {React.Component} The App component which includes routing and the context provider for the application.\n*/\nconst App = () => {\n\n  const [format, setFormat] = useState('json');\n\n  return (\n    <FormatContext.Provider value={{ format, setFormat }}>\n      <Router>\n      <Routes>\n        <Route exact path=\"/\" element={<Films/>}/>\n        <Route path='/films/:id' element={<EditFilm/>}/>\n        <Route path='/films/add' element={<AddEdit/>}/>\n      </Routes>\n    </Router>\n    </FormatContext.Provider>\n  )\n}\n\n\n\n/**\n * The Format component of the application.\n *\n * This component provides a dropdown that allows the user to choose the format of data - JSON, XML or Text.\n * It also handles fetching data/GET request in the selected format from the '/FilmAPI/filmapi' endpoint whenever\n * the selected format is changed and the current page is '/FilmAPI/filmapi'.\n *\n * @returns {React.Component} The Format component which includes a selection dropdown and data fetching logic.\n */\n  const Format = () => {\n\n    const { format, setFormat } = useContext(FormatContext);\n    const navigate = useNavigate();\n    const location = useLocation();\n\n    // sets the format of the dropdown value and does the GET request if the endpoint is '/FilmAPI/filmapi'\n    const handleFormat = async (event) => {\n      console.log(\"Dropdown: \", event.target.value);\n      FormatContext.format = event.target.value;\n      \n      setFormat(event.target.value);\n\n      if (location.pathname === '/FilmAPI/filmapi') {\n        await handleSubmit(event, event.target.value);\n      }\n\n    };\n\n   /**\n   * Performs a GET request in different formats based on the selected value of the dropdown.\n   * After the GET request is completed, it navigates to the root route.\n   * \n   * @async\n   * @function\n   * @param {Event} event - The submit event triggered by the form.\n   * @param {string} selectedFormat - The selected format for the GET request - JSON, XML or Text\n   * \n   * @returns {Promise} - to send GET request to the API\n   * \n   */\n    const handleSubmit = async (event, selectedFormat) => {\n      let accept = \"application/json\";\n      event.preventDefault();  \n  \n      if (selectedFormat === \"xml\")\n      {\n        accept = \"application/xml\";\n      }\n      else if (selectedFormat === \"text\")\n      {\n        accept = \"text/plain\";\n      }\n      else \n      {\n        accept = \"application/json\";\n      }\n\n\n    await fetch(`/FilmAPI/filmapi`,{\n        method: \"GET\",\n        headers: {\n          Accept: accept,\n          \"Content-Type\": accept,\n        },\n        \n      })\n    \n\n    navigate(\"/\");\n\n  };\n\n  return (\n    <div className = \"ms-4 me-3 row pt-4\"> \n      <FormGroup>\n        <Input \n          type=\"select\" \n          name=\"formatType\" \n          value={format} \n          onChange={handleFormat}\n          className='mb-2'\n        >\n            <option value=\"json\">JSON</option>\n            <option value=\"xml\">XML</option>\n            <option value=\"text\">Text</option>\n        </Input>\n      </FormGroup>\n    </div>\n    \n  );\n};\n\nexport { App,Format };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}